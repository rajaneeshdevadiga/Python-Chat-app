name: Deploy to Amazon ECS

on:
  push:
    branches:
      - main

env:
  ECR_REGISTRY: 730335489777.dkr.ecr.us-east-1.amazonaws.com/python-app
  ECR_REPOSITORY: python-app
  ECS_SERVICE: py-chat-service
  ECS_CLUSTER: py-chat-cluster
  ECS_TASK_DEFINITION: .aws/task-definition.json
  CONTAINER_NAME: python-app

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: dev

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          IMAGE_TAG: v1
        run: |
          docker build -t 730335489777.dkr.ecr.us-east-1.amazonaws.com/python-app:$IMAGE_TAG .
          docker push 730335489777.dkr.ecr.us-east-1.amazonaws.com/python-app:$IMAGE_TAG
          echo "image=730335489777.dkr.ecr.us-east-1.amazonaws.com/python-app:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
